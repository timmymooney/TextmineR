% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pos_udpipe_annotate_documents.R
\name{pos_udpipe_annotate_documents}
\alias{pos_udpipe_annotate_documents}
\title{Annotate Documents for Parts of Speech Analysis}
\usage{
pos_udpipe_annotate_documents(
  data,
  text_variable,
  id_variable,
  pos_model,
  ...,
  in_parallel = FALSE,
  dependency_parse = FALSE,
  report_progress = 100
)
}
\arguments{
\item{data}{The data.frame or tibble object containing any texts or documents that the user wishes to conduct parts of speech analysis upon.}

\item{text_variable}{Any texts or sentences that the user wishes to perform parts of speech annotations on.}

\item{id_variable}{The identifying variable for documents, this can be something like "row_number", "document_id" or similar.}

\item{pos_model}{A UDPipe model imported using `pos_udpipe_load_model`, and must be of class 'udpipe_model'.}

\item{...}{To enable the user to supply any additional arguments made possible by UDPipe.}

\item{in_parallel}{A logical argument allowing the user to initiate parallel processing to speed the annotate function up. If set to TRUE,  the function will select the number of available cores minus one, processing the data more efficiently(faster), leaving one core to manage other computations. However, the default is set to FALSE.}

\item{dependency_parse}{Whether to perform dependency parsing on tokens. The default argument is FALSE. If the user wishes to perform parsing on tokens, they may do so by calling TRUE.}

\item{report_progress}{The user has the option to state how often they would like a progress report of the annotation process posted in the console by stating whether they want a message every 100, 500 or 1000 documents. This is useful when annotating large sets of data and serves as a sanity check to ensure the session hasn't used up all available memory and the annotations have stopped running.}
}
\value{
Returns a data frame with documents broken up at both a token and sentence level, in addition to the existing variables present in `data` supplied to the function. The returned object contains the parts of speech annotations in CONLL-U formatting, where each row is an annotation of a word. To find out more on the formatting methods, read [here](https://universaldependencies.org/format.html).
The additional arguments with tagged POS information are as follows:
- paragraph_id: The identifier indicating the paragraph the annotated token is derived from.
- sentence_id: Similar to paragraph_id but at a sentence level.
- sentence: The sentence the annotated token is derived from.
- token_id: Token index, integer starting at 1 for each new sentence. May be a range for multiword tokens or a decimal number for empty nodes.
- token: The token(or word) being annotated for parts of speech.
- lemma: The lemmatized version of the annotated token.
- pos_tag: The universal parts of speech tag of the token. [Here](https://universaldependencies.org/format.html) for more information.
- xpos: The treebank-specific parts of speech tag of the token.
- feats: The morphological features of the token, used for dependency parsing visualisations,.
- head_token_id: Indicating what is the token id of the head of the token, indicating to which other token in the sentence it is related.
- dependency_tag: The information regarding dependency parsing of tokens, displaying the type of relation the token has with the head_token_id. [Here](https://universaldependencies.org/format.html) for more information.
}
\description{
Annotate Documents for Parts of Speech Analysis
}
\details{
Another wrap around UDPipe, but one that assists in annotating documents, labeling the different parts of speech and selectively performing dependency parsing if specified.
}
\examples{
pos_model_en <- TextmineR::pos_udpipe_load_model(model = "english")
df_annotated <- TextmineR::pos_udpipe_annotate_documents(data = data,
                                                         text_variable = review_comment,
                                                         id_variable = row_number,
                                                         pos_model = pos_model_en,
                                                         in_parallel = FALSE,
                                                         dependency_parse = TRUE,
                                                         report_progress = 100)
}
